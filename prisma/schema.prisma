// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Restaurant {
  id                    String   @id @default(cuid())
  name                  String
  slug                  String   @unique
  email                 String   @unique
  phone                 String?
  address               String?
  operatingHours        Json?    // { "monday": { "open": "09:00", "close": "22:00" }, ... }
  avgServiceTimeMinutes Int      @default(45)
  qrCodeUrl             String?
  settings              Json?    // { "maxPartySize": 8, "autoAssignTables": true, ... }
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  tables      Table[]
  queueEntries QueueEntry[]
  users       RestaurantUser[]

  @@map("restaurants")
}

model RestaurantUser {
  id           String @id @default(cuid())
  email        String @unique
  name         String
  role         String @default("admin") // admin, staff
  restaurantId String
  createdAt    DateTime @default(now())

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("restaurant_users")
}

model Table {
  id            String  @id @default(cuid())
  restaurantId  String
  tableNumber   String
  seatCount     Int
  tableType     String  @default("regular") // regular, booth, bar, outdoor
  positionX     Float?  // for layout visualization
  positionY     Float?
  isActive      Boolean @default(true)
  status        String  @default("available") // available, occupied, cleaning, maintenance
  occupiedAt    DateTime?
  currentPartySize Int?
  currentCustomerName String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  queueEntries QueueEntry[]

  @@unique([restaurantId, tableNumber])
  @@map("tables")
}

model QueueEntry {
  id                      String    @id @default(cuid())
  restaurantId            String
  tableId                 String?
  customerName            String
  customerEmail           String
  partySize               Int
  estimatedWaitMinutes    Int
  actualWaitMinutes       Int?
  status                  String    @default("waiting") // waiting, called, seated, no_show, cancelled
  priorityScore           Int       @default(0)
  notificationPreference  String    @default("email") // email, none
  lastNotificationSent    DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  seatedAt                DateTime?
  completedAt             DateTime?

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  table      Table?     @relation(fields: [tableId], references: [id])

  @@map("queue_entries")
}

model QueueHistory {
  id                   String   @id @default(cuid())
  restaurantId         String
  customerName         String
  customerEmail        String
  partySize            Int
  estimatedWaitMinutes Int
  actualWaitMinutes    Int
  tableId              String?
  status               String
  priorityScore        Int      @default(0)
  createdAt            DateTime
  seatedAt             DateTime?
  completedAt          DateTime
  dayOfWeek            Int      // 0-6 for analytics
  hourOfDay            Int      // 0-23 for analytics
  isWeekend            Boolean
  isPeakTime           Boolean

  @@index([restaurantId, createdAt])
  @@index([restaurantId, dayOfWeek, hourOfDay])
  @@map("queue_history")
}